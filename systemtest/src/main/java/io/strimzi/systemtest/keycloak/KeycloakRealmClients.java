/*
 * Copyright Strimzi authors.
 * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).
 */
package io.strimzi.systemtest.keycloak;

import org.keycloak.v1alpha1.keycloakrealmspec.realm.Clients;
import org.keycloak.v1alpha1.keycloakrealmspec.realm.ClientsBuilder;
import org.keycloak.v1alpha1.keycloakrealmspec.realm.clients.ProtocolMappersBuilder;

import java.util.Collections;
import java.util.List;
import java.util.Map;

public class KeycloakRealmClients {

    public static final Clients KAFKA = new ClientsBuilder()
            .withClientId("kafka")
            .withEnabled()
            .withPublicClient()
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled(false)
            .withAuthorizationServicesEnabled(false)
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .build();

    public static final Clients SCOPE_KAFKA_BROKER = new ClientsBuilder()
            .withClientId("kafka-broker")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-broker-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withServiceAccountsEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_BROKER = new ClientsBuilder()
            .withClientId("kafka-broker")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-broker-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .withProtocolMappers(
                    new ProtocolMappersBuilder()
                            .withName("audience for kafka-component")
                            .withProtocol("openid-connect")
                            .withProtocolMapper("oidc-audience-mapper")
                            .withConsentRequired(false)
                            .withConfig(Map.of("included.client.audience", "kafka-component", "id.token.claim", "false", "access.token.claim", "true"))
                            .build()
            )
            .build();

    public static final Clients KAFKA_PRODUCER = new ClientsBuilder()
            .withClientId("kafka-producer")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-producer-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_CONSUMER = new ClientsBuilder()
            .withClientId("kafka-consumer")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-consumer-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_AUDIENCE_PRODUCER = new ClientsBuilder()
            .withClientId("kafka-audience-producer")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-audience-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "36000"))
            .withProtocolMappers(
                    new ProtocolMappersBuilder()
                            .withName("audience for kafka-component")
                            .withProtocol("openid-connect")
                            .withProtocolMapper("oidc-audience-mapper")
                            .withConsentRequired(false)
                            .withConfig(Map.of("included.client.audience", "kafka-component", "id.token.claim", "false", "access.token.claim", "true"))
                            .build()
            )
            .build();

    public static final Clients KAFKA_AUDIENCE_CONSUMER = new ClientsBuilder()
            .withClientId("kafka-audience-consumer")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-audience-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .withProtocolMappers(
                    new ProtocolMappersBuilder()
                            .withName("audience for kafka-component")
                            .withProtocol("openid-connect")
                            .withProtocolMapper("oidc-audience-mapper")
                            .withConsentRequired(false)
                            .withConfig(Map.of("included.client.audience", "kafka-component", "id.token.claim", "false", "access.token.claim", "true"))
                            .build()
            )
            .build();

    public static final Clients HW_PRODUCER = new ClientsBuilder()
            .withClientId("hello-world-producer")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("hello-world-producer-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "36000"))
            .build();

    public static final Clients HW_CONSUMER = new ClientsBuilder()
            .withClientId("hello-world-consumer")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("hello-world-consumer-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients HW_STREAMS = new ClientsBuilder()
            .withClientId("hello-world-streams")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("hello-world-streams-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_CONNECT = new ClientsBuilder()
            .withClientId("kafka-connect")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-connect-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_BRIDGE = new ClientsBuilder()
            .withClientId("kafka-bridge")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-bridge-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_MM = new ClientsBuilder()
            .withClientId("kafka-mirror-maker")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-mirror-maker-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_MM2 = new ClientsBuilder()
            .withClientId("kafka-mirror-maker-2")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-mirror-maker-2-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withAuthorizationServicesEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .build();

    public static final Clients KAFKA_CLIENT = new ClientsBuilder()
            .withClientId("kafka-client")
            .withEnabled()
            .withClientAuthenticatorType("client-secret")
            .withSecret("kafka-client-secret")
            .withPublicClient(false)
            .withBearerOnly(false)
            .withStandardFlowEnabled(false)
            .withImplicitFlowEnabled(false)
            .withDirectAccessGrantsEnabled()
            .withServiceAccountsEnabled()
            .withConsentRequired(false)
            .withFullScopeAllowed(false)
            .withAttributes(Collections.singletonMap("access.token.lifespan", "32140800"))
            .withFullScopeAllowed()
            .withNodeReRegistrationTimeout(-1L)
            .withDefaultClientScopes("profile")
            .withOptionalClientScopes("test", "offline_access")
            .build();

    public static List<Clients> getAllClients() {
        return List.of(
                KAFKA, KAFKA_BROKER, KAFKA_PRODUCER, KAFKA_CONSUMER, KAFKA_AUDIENCE_PRODUCER, KAFKA_AUDIENCE_CONSUMER,
                HW_PRODUCER, HW_CONSUMER, HW_STREAMS, KAFKA_BRIDGE, KAFKA_CONNECT, KAFKA_MM, KAFKA_MM2
        );
    }
}
